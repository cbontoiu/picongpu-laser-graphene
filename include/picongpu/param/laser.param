#pragma once

#include "picongpu/fields/laserProfiles/profiles.def"
#include <pmacc/ppFunctions.hpp>
namespace picongpu
{
	namespace fields
	{
		namespace laserProfiles
		{

			namespace gaussianBeam
			{
				static constexpr uint32_t MODENUMBER = 0;
				PMACC_CONST_VECTOR(float_X, MODENUMBER + 1, LAGUERREMODES, 1.0);
			} // end of gaussianBeam namespace

			struct GaussianBeamParam
			{
				static constexpr float_64 PULSE_LENGTH_SI = 4.249548868e-16; // [s] duration of time standard deviation
				static constexpr float_64 WAVE_LENGTH_SI = 1.000e-07;
				static constexpr float_64 _A0 = 2.703525e+00;

				static constexpr float_64 UNITCONV_A0_to_Amplitude_SI = -2.0 * PI / WAVE_LENGTH_SI *
				::picongpu::SI::ELECTRON_MASS_SI * ::picongpu::SI::SPEED_OF_LIGHT_SI *
				::picongpu::SI::SPEED_OF_LIGHT_SI / ::picongpu::SI::ELECTRON_CHARGE_SI;
				static constexpr float_64 AMPLITUDE_SI = _A0 * UNITCONV_A0_to_Amplitude_SI;

				// beam waist[m]: distance from the axis where the pulse intensity (E^2) decreases to its 1/e^2-th part,
				// at the focus position of the laser W0_SI = FWHM_of_Intensity/sqrt{2*ln(2)} [1.17741]
				static constexpr float_64 W0_SI = 4.000e-07;
				//the distance [m] to the laser focus in y-direction
				static constexpr float_64 FOCUS_POS_SI = 1.000e-06;

				// The laser pulse will be initialized PULSE_INIT times of the PULSE_LENGTH
				static constexpr float_64 PULSE_INIT = 6.71123712825;
				// cell from top where the laser is initialized
				// if `initPlaneY == 0` than the absorber are disabled
				// if `initPlaneY > absorbercells negative Y` the negative absorber in y direction is enabled
				static constexpr uint32_t initPlaneY = 0;
				static constexpr float_X LASER_PHASE = 0.0;

				// Laguerre modes
				using LAGUERREMODES_t = gaussianBeam::LAGUERREMODES_t;
				static constexpr uint32_t MODENUMBER = gaussianBeam::MODENUMBER;

				enum PolarisationType { LINEAR_X = 1u, LINEAR_Z = 2u, CIRCULAR = 4u };
				static constexpr PolarisationType Polarisation = LINEAR_X;
			}; // end of GaussianBeamParam struct

			// selected laser profile
			using Selected = GaussianBeam < GaussianBeamParam >;

		} // end of laserProfiles namespace
	} // end of picongpu fields namepsace
} // end of picongpu namespace
