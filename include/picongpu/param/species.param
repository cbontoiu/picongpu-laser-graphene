#pragma once

#include "picongpu/particles/shapes.hpp"
#include "picongpu/algorithms/FieldToParticleInterpolationNative.hpp"
#include "picongpu/algorithms/FieldToParticleInterpolation.hpp"
#include "picongpu/algorithms/AssignedTrilinearInterpolation.hpp"

#include "picongpu/particles/flylite/NonLTE.def"
#include "picongpu/fields/currentDeposition/Solver.def"


namespace picongpu
{
/*---------------------------- generic solver---------------------------------*/

/*! Particle Shape definitions -------------------------------------------------
 *  - particles::shapes::CIC : 1st order
 *  - particles::shapes::TSC : 2nd order
 *  - particles::shapes::PCS : 3rd order
 *  - particles::shapes::P4S : 4th order
 *
 *  example: using UsedParticleShape = particles::shapes::CIC;
 */
#ifndef PARAM_PARTICLESHAPE
#define PARAM_PARTICLESHAPE TSC
#endif
using UsedParticleShape = particles::shapes::PARAM_PARTICLESHAPE;

/* define which interpolation method is used to interpolate fields to particle*/
using UsedField2Particle = FieldToParticleInterpolation< UsedParticleShape, AssignedTrilinearInterpolation >;

/*! select current solver method
 * - currentSolver::Esirkepov< SHAPE, STRATEGY > : particle shapes - CIC, TSC, PCS, P4S (1st to 4th order)
 * - currentSolver::VillaBune< SHAPE, STRATEGY > : particle shapes - CIC (1st order) only
 * - currentSolver::EmZ< SHAPE, STRATEGY >       : particle shapes - CIC, TSC, PCS, P4S (1st to 4th order)
 *
 * For development purposes:
 * - currentSolver::currentSolver::EsirkepovNative< SHAPE, STRATEGY > : generic version of currentSolverEsirkepov
 *   without optimization (~4x slower and needs more shared memory)
 *
 * STRATEGY (optional):
 * - currentSolver::strategy::StridedCachedSupercells
 * - currentSolver::strategy::CachedSupercells
 * - currentSolver::strategy::NonCachedSupercells
 */
#ifndef PARAM_CURRENTSOLVER
#define PARAM_CURRENTSOLVER Esirkepov
#endif
using UsedParticleCurrentSolver = currentSolver::PARAM_CURRENTSOLVER< UsedParticleShape >;

/*! particle pusher configuration ----------------------------------------------
 *
 * Defining a pusher is optional for particles
 *
 * - particles::pusher::Vay : better suited relativistic boris pusher
 * - particles::pusher::Boris : standard boris pusher
 * - particles::pusher::ReducedLandauLifshitz : 4th order RungeKutta pusher
 *                                              with classical radiation reaction
 *
 * For diagnostics & modeling: ------------------------------------------------
 * - particles::pusher::Free : free propagation, ignore fields
 *                             (= free stream model)
 * - particles::pusher::Photon : propagate with c in direction of normalized mom.
 * - particles::pusher::Probe : Probe particles that interpolate E & B
 * For development purposes: --------------------------------------------------
 * - particles::pusher::Axel : a pusher developed at HZDR during 2011 (testing)
 */
#ifndef PARAM_PARTICLEPUSHER
#define PARAM_PARTICLEPUSHER Boris
#endif
using UsedParticlePusher = particles::pusher::PARAM_PARTICLEPUSHER;

}//namespace picongpu
