#pragma once

#include <pmacc/math/Vector.hpp>
#include <pmacc/mappings/kernel/MappingDescription.hpp>

namespace picongpu
{

	constexpr size_t reservedGpuMemorySize = 350 * 1024 * 1024;

	/* short namespace*/
	namespace mCT = pmacc::math::CT;
	using SuperCellSize = mCT::Int< 16, 16 >;

	/** define mapper which is used for kernel call mappings */
	using MappingDesc = MappingDescription< simDim, SuperCellSize >;

	using GuardSize = typename mCT::shrinkTo< mCT::Int< 1, 1, 1 >, simDim >::type;

	struct DefaultExchangeMemCfg
		{
			// memory used for a direction
			static constexpr uint32_t BYTES_EXCHANGE_X = 64 * 1024 * 1024;
			static constexpr uint32_t BYTES_EXCHANGE_Y = 128 * 1024 * 1024;
			static constexpr uint32_t BYTES_EXCHANGE_Z = 1 * 1024 * 1024;
			static constexpr uint32_t BYTES_EDGES = 256 * 1024; 
			static constexpr uint32_t BYTES_CORNER = 128 * 1024;

			//The size of the local domain for which the exchange sizes `BYTES_*` are configured for.
			using REF_LOCAL_DOM_SIZE = mCT::Int<0, 0, 0>;

			//Scaling rate per direction
			//1.0 means it scales linear with the ratio between the local domain size at runtime and the reference local domain size.
			const std::array<float_X, 3> DIR_SCALING_FACTOR = {0.900 ,0.900 ,0.100};
		}; // end of DefaultExchangeMemCfg

		/** number of scalar fields that are reserved as temporary fields */
		constexpr uint32_t fieldTmpNumSlots = 2;
		constexpr bool fieldTmpSupportGatherCommunication = true;
} // end of picongpu namespace
